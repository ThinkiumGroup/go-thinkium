// Code generated by protoc-gen-go. DO NOT EDIT.
// source: server.proto

package rpcserver

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type RpcChainInfoReq struct {
	Chainid              []uint32 `protobuf:"varint,1,rep,packed,name=chainid,proto3" json:"chainid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RpcChainInfoReq) Reset()         { *m = RpcChainInfoReq{} }
func (m *RpcChainInfoReq) String() string { return proto.CompactTextString(m) }
func (*RpcChainInfoReq) ProtoMessage()    {}
func (*RpcChainInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad098daeda4239f7, []int{0}
}

func (m *RpcChainInfoReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RpcChainInfoReq.Unmarshal(m, b)
}
func (m *RpcChainInfoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RpcChainInfoReq.Marshal(b, m, deterministic)
}
func (m *RpcChainInfoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcChainInfoReq.Merge(m, src)
}
func (m *RpcChainInfoReq) XXX_Size() int {
	return xxx_messageInfo_RpcChainInfoReq.Size(m)
}
func (m *RpcChainInfoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcChainInfoReq.DiscardUnknown(m)
}

var xxx_messageInfo_RpcChainInfoReq proto.InternalMessageInfo

func (m *RpcChainInfoReq) GetChainid() []uint32 {
	if m != nil {
		return m.Chainid
	}
	return nil
}

type RpcAddress struct {
	Chainid              uint32   `protobuf:"varint,1,opt,name=chainid,proto3" json:"chainid,omitempty"`
	Address              []byte   `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RpcAddress) Reset()         { *m = RpcAddress{} }
func (m *RpcAddress) String() string { return proto.CompactTextString(m) }
func (*RpcAddress) ProtoMessage()    {}
func (*RpcAddress) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad098daeda4239f7, []int{1}
}

func (m *RpcAddress) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RpcAddress.Unmarshal(m, b)
}
func (m *RpcAddress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RpcAddress.Marshal(b, m, deterministic)
}
func (m *RpcAddress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcAddress.Merge(m, src)
}
func (m *RpcAddress) XXX_Size() int {
	return xxx_messageInfo_RpcAddress.Size(m)
}
func (m *RpcAddress) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcAddress.DiscardUnknown(m)
}

var xxx_messageInfo_RpcAddress proto.InternalMessageInfo

func (m *RpcAddress) GetChainid() uint32 {
	if m != nil {
		return m.Chainid
	}
	return 0
}

func (m *RpcAddress) GetAddress() []byte {
	if m != nil {
		return m.Address
	}
	return nil
}

type RpcTXHash struct {
	Chainid              uint32   `protobuf:"varint,1,opt,name=chainid,proto3" json:"chainid,omitempty"`
	Hash                 []byte   `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RpcTXHash) Reset()         { *m = RpcTXHash{} }
func (m *RpcTXHash) String() string { return proto.CompactTextString(m) }
func (*RpcTXHash) ProtoMessage()    {}
func (*RpcTXHash) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad098daeda4239f7, []int{2}
}

func (m *RpcTXHash) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RpcTXHash.Unmarshal(m, b)
}
func (m *RpcTXHash) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RpcTXHash.Marshal(b, m, deterministic)
}
func (m *RpcTXHash) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcTXHash.Merge(m, src)
}
func (m *RpcTXHash) XXX_Size() int {
	return xxx_messageInfo_RpcTXHash.Size(m)
}
func (m *RpcTXHash) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcTXHash.DiscardUnknown(m)
}

var xxx_messageInfo_RpcTXHash proto.InternalMessageInfo

func (m *RpcTXHash) GetChainid() uint32 {
	if m != nil {
		return m.Chainid
	}
	return 0
}

func (m *RpcTXHash) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

type RpcTxList struct {
	Chainid              uint32      `protobuf:"varint,1,opt,name=chainid,proto3" json:"chainid,omitempty"`
	Address              *RpcAddress `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	StartHeight          uint32      `protobuf:"varint,3,opt,name=startHeight,proto3" json:"startHeight,omitempty"`
	EndHeight            uint32      `protobuf:"varint,4,opt,name=endHeight,proto3" json:"endHeight,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *RpcTxList) Reset()         { *m = RpcTxList{} }
func (m *RpcTxList) String() string { return proto.CompactTextString(m) }
func (*RpcTxList) ProtoMessage()    {}
func (*RpcTxList) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad098daeda4239f7, []int{3}
}

func (m *RpcTxList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RpcTxList.Unmarshal(m, b)
}
func (m *RpcTxList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RpcTxList.Marshal(b, m, deterministic)
}
func (m *RpcTxList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcTxList.Merge(m, src)
}
func (m *RpcTxList) XXX_Size() int {
	return xxx_messageInfo_RpcTxList.Size(m)
}
func (m *RpcTxList) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcTxList.DiscardUnknown(m)
}

var xxx_messageInfo_RpcTxList proto.InternalMessageInfo

func (m *RpcTxList) GetChainid() uint32 {
	if m != nil {
		return m.Chainid
	}
	return 0
}

func (m *RpcTxList) GetAddress() *RpcAddress {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *RpcTxList) GetStartHeight() uint32 {
	if m != nil {
		return m.StartHeight
	}
	return 0
}

func (m *RpcTxList) GetEndHeight() uint32 {
	if m != nil {
		return m.EndHeight
	}
	return 0
}

type RpcTx struct {
	Chainid              uint32      `protobuf:"varint,1,opt,name=chainid,proto3" json:"chainid,omitempty"`
	From                 *RpcAddress `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	To                   *RpcAddress `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`
	Nonce                uint64      `protobuf:"varint,4,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Val                  string      `protobuf:"bytes,5,opt,name=val,proto3" json:"val,omitempty"`
	Input                []byte      `protobuf:"bytes,6,opt,name=input,proto3" json:"input,omitempty"`
	Pub                  []byte      `protobuf:"bytes,7,opt,name=pub,proto3" json:"pub,omitempty"`
	Sig                  []byte      `protobuf:"bytes,8,opt,name=sig,proto3" json:"sig,omitempty"`
	Uselocal             bool        `protobuf:"varint,9,opt,name=uselocal,proto3" json:"uselocal,omitempty"`
	Extra                []byte      `protobuf:"bytes,10,opt,name=extra,proto3" json:"extra,omitempty"`
	Multipubs            [][]byte    `protobuf:"bytes,11,rep,name=multipubs,proto3" json:"multipubs,omitempty"`
	Multisigs            [][]byte    `protobuf:"bytes,12,rep,name=multisigs,proto3" json:"multisigs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *RpcTx) Reset()         { *m = RpcTx{} }
func (m *RpcTx) String() string { return proto.CompactTextString(m) }
func (*RpcTx) ProtoMessage()    {}
func (*RpcTx) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad098daeda4239f7, []int{4}
}

func (m *RpcTx) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RpcTx.Unmarshal(m, b)
}
func (m *RpcTx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RpcTx.Marshal(b, m, deterministic)
}
func (m *RpcTx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcTx.Merge(m, src)
}
func (m *RpcTx) XXX_Size() int {
	return xxx_messageInfo_RpcTx.Size(m)
}
func (m *RpcTx) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcTx.DiscardUnknown(m)
}

var xxx_messageInfo_RpcTx proto.InternalMessageInfo

func (m *RpcTx) GetChainid() uint32 {
	if m != nil {
		return m.Chainid
	}
	return 0
}

func (m *RpcTx) GetFrom() *RpcAddress {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *RpcTx) GetTo() *RpcAddress {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *RpcTx) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *RpcTx) GetVal() string {
	if m != nil {
		return m.Val
	}
	return ""
}

func (m *RpcTx) GetInput() []byte {
	if m != nil {
		return m.Input
	}
	return nil
}

func (m *RpcTx) GetPub() []byte {
	if m != nil {
		return m.Pub
	}
	return nil
}

func (m *RpcTx) GetSig() []byte {
	if m != nil {
		return m.Sig
	}
	return nil
}

func (m *RpcTx) GetUselocal() bool {
	if m != nil {
		return m.Uselocal
	}
	return false
}

func (m *RpcTx) GetExtra() []byte {
	if m != nil {
		return m.Extra
	}
	return nil
}

func (m *RpcTx) GetMultipubs() [][]byte {
	if m != nil {
		return m.Multipubs
	}
	return nil
}

func (m *RpcTx) GetMultisigs() [][]byte {
	if m != nil {
		return m.Multisigs
	}
	return nil
}

type RpcStatsReq struct {
	Chainid              uint32   `protobuf:"varint,1,opt,name=chainid,proto3" json:"chainid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RpcStatsReq) Reset()         { *m = RpcStatsReq{} }
func (m *RpcStatsReq) String() string { return proto.CompactTextString(m) }
func (*RpcStatsReq) ProtoMessage()    {}
func (*RpcStatsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad098daeda4239f7, []int{5}
}

func (m *RpcStatsReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RpcStatsReq.Unmarshal(m, b)
}
func (m *RpcStatsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RpcStatsReq.Marshal(b, m, deterministic)
}
func (m *RpcStatsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcStatsReq.Merge(m, src)
}
func (m *RpcStatsReq) XXX_Size() int {
	return xxx_messageInfo_RpcStatsReq.Size(m)
}
func (m *RpcStatsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcStatsReq.DiscardUnknown(m)
}

var xxx_messageInfo_RpcStatsReq proto.InternalMessageInfo

func (m *RpcStatsReq) GetChainid() uint32 {
	if m != nil {
		return m.Chainid
	}
	return 0
}

type RpcRequest struct {
	Data                 string   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RpcRequest) Reset()         { *m = RpcRequest{} }
func (m *RpcRequest) String() string { return proto.CompactTextString(m) }
func (*RpcRequest) ProtoMessage()    {}
func (*RpcRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad098daeda4239f7, []int{6}
}

func (m *RpcRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RpcRequest.Unmarshal(m, b)
}
func (m *RpcRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RpcRequest.Marshal(b, m, deterministic)
}
func (m *RpcRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcRequest.Merge(m, src)
}
func (m *RpcRequest) XXX_Size() int {
	return xxx_messageInfo_RpcRequest.Size(m)
}
func (m *RpcRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RpcRequest proto.InternalMessageInfo

func (m *RpcRequest) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

type RpcChainRequest struct {
	Chainid              uint32   `protobuf:"varint,1,opt,name=chainid,proto3" json:"chainid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RpcChainRequest) Reset()         { *m = RpcChainRequest{} }
func (m *RpcChainRequest) String() string { return proto.CompactTextString(m) }
func (*RpcChainRequest) ProtoMessage()    {}
func (*RpcChainRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad098daeda4239f7, []int{7}
}

func (m *RpcChainRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RpcChainRequest.Unmarshal(m, b)
}
func (m *RpcChainRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RpcChainRequest.Marshal(b, m, deterministic)
}
func (m *RpcChainRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcChainRequest.Merge(m, src)
}
func (m *RpcChainRequest) XXX_Size() int {
	return xxx_messageInfo_RpcChainRequest.Size(m)
}
func (m *RpcChainRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcChainRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RpcChainRequest proto.InternalMessageInfo

func (m *RpcChainRequest) GetChainid() uint32 {
	if m != nil {
		return m.Chainid
	}
	return 0
}

type RpcResponse struct {
	Code                 int32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Data                 string   `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RpcResponse) Reset()         { *m = RpcResponse{} }
func (m *RpcResponse) String() string { return proto.CompactTextString(m) }
func (*RpcResponse) ProtoMessage()    {}
func (*RpcResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad098daeda4239f7, []int{8}
}

func (m *RpcResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RpcResponse.Unmarshal(m, b)
}
func (m *RpcResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RpcResponse.Marshal(b, m, deterministic)
}
func (m *RpcResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcResponse.Merge(m, src)
}
func (m *RpcResponse) XXX_Size() int {
	return xxx_messageInfo_RpcResponse.Size(m)
}
func (m *RpcResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RpcResponse proto.InternalMessageInfo

func (m *RpcResponse) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *RpcResponse) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

type RpcBlockHeight struct {
	Chainid              uint32   `protobuf:"varint,1,opt,name=chainid,proto3" json:"chainid,omitempty"`
	Height               uint64   `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RpcBlockHeight) Reset()         { *m = RpcBlockHeight{} }
func (m *RpcBlockHeight) String() string { return proto.CompactTextString(m) }
func (*RpcBlockHeight) ProtoMessage()    {}
func (*RpcBlockHeight) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad098daeda4239f7, []int{9}
}

func (m *RpcBlockHeight) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RpcBlockHeight.Unmarshal(m, b)
}
func (m *RpcBlockHeight) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RpcBlockHeight.Marshal(b, m, deterministic)
}
func (m *RpcBlockHeight) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcBlockHeight.Merge(m, src)
}
func (m *RpcBlockHeight) XXX_Size() int {
	return xxx_messageInfo_RpcBlockHeight.Size(m)
}
func (m *RpcBlockHeight) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcBlockHeight.DiscardUnknown(m)
}

var xxx_messageInfo_RpcBlockHeight proto.InternalMessageInfo

func (m *RpcBlockHeight) GetChainid() uint32 {
	if m != nil {
		return m.Chainid
	}
	return 0
}

func (m *RpcBlockHeight) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

type RpcChainEpoch struct {
	Chainid              uint32   `protobuf:"varint,1,opt,name=chainid,proto3" json:"chainid,omitempty"`
	Epoch                uint64   `protobuf:"varint,2,opt,name=epoch,proto3" json:"epoch,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RpcChainEpoch) Reset()         { *m = RpcChainEpoch{} }
func (m *RpcChainEpoch) String() string { return proto.CompactTextString(m) }
func (*RpcChainEpoch) ProtoMessage()    {}
func (*RpcChainEpoch) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad098daeda4239f7, []int{10}
}

func (m *RpcChainEpoch) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RpcChainEpoch.Unmarshal(m, b)
}
func (m *RpcChainEpoch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RpcChainEpoch.Marshal(b, m, deterministic)
}
func (m *RpcChainEpoch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcChainEpoch.Merge(m, src)
}
func (m *RpcChainEpoch) XXX_Size() int {
	return xxx_messageInfo_RpcChainEpoch.Size(m)
}
func (m *RpcChainEpoch) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcChainEpoch.DiscardUnknown(m)
}

var xxx_messageInfo_RpcChainEpoch proto.InternalMessageInfo

func (m *RpcChainEpoch) GetChainid() uint32 {
	if m != nil {
		return m.Chainid
	}
	return 0
}

func (m *RpcChainEpoch) GetEpoch() uint64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

type RpcBlockTxsReq struct {
	Chainid              uint32   `protobuf:"varint,1,opt,name=chainid,proto3" json:"chainid,omitempty"`
	Height               uint64   `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	Page                 int32    `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	Size                 int32    `protobuf:"varint,4,opt,name=size,proto3" json:"size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RpcBlockTxsReq) Reset()         { *m = RpcBlockTxsReq{} }
func (m *RpcBlockTxsReq) String() string { return proto.CompactTextString(m) }
func (*RpcBlockTxsReq) ProtoMessage()    {}
func (*RpcBlockTxsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad098daeda4239f7, []int{11}
}

func (m *RpcBlockTxsReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RpcBlockTxsReq.Unmarshal(m, b)
}
func (m *RpcBlockTxsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RpcBlockTxsReq.Marshal(b, m, deterministic)
}
func (m *RpcBlockTxsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcBlockTxsReq.Merge(m, src)
}
func (m *RpcBlockTxsReq) XXX_Size() int {
	return xxx_messageInfo_RpcBlockTxsReq.Size(m)
}
func (m *RpcBlockTxsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcBlockTxsReq.DiscardUnknown(m)
}

var xxx_messageInfo_RpcBlockTxsReq proto.InternalMessageInfo

func (m *RpcBlockTxsReq) GetChainid() uint32 {
	if m != nil {
		return m.Chainid
	}
	return 0
}

func (m *RpcBlockTxsReq) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *RpcBlockTxsReq) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *RpcBlockTxsReq) GetSize() int32 {
	if m != nil {
		return m.Size
	}
	return 0
}

type RpcCashCheck struct {
	Chainid              uint32      `protobuf:"varint,1,opt,name=chainid,proto3" json:"chainid,omitempty"`
	From                 *RpcAddress `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	To                   *RpcAddress `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`
	Nonce                uint64      `protobuf:"varint,4,opt,name=nonce,proto3" json:"nonce,omitempty"`
	ExpireHeight         uint64      `protobuf:"varint,5,opt,name=expireHeight,proto3" json:"expireHeight,omitempty"`
	Amount               string      `protobuf:"bytes,6,opt,name=amount,proto3" json:"amount,omitempty"`
	Uselocal             bool        `protobuf:"varint,7,opt,name=uselocal,proto3" json:"uselocal,omitempty"`
	ParentChain          uint32      `protobuf:"varint,8,opt,name=parentChain,proto3" json:"parentChain,omitempty"`
	IsShard              bool        `protobuf:"varint,9,opt,name=isShard,proto3" json:"isShard,omitempty"`
	CurrencyId           int32       `protobuf:"varint,10,opt,name=currencyId,proto3" json:"currencyId,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *RpcCashCheck) Reset()         { *m = RpcCashCheck{} }
func (m *RpcCashCheck) String() string { return proto.CompactTextString(m) }
func (*RpcCashCheck) ProtoMessage()    {}
func (*RpcCashCheck) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad098daeda4239f7, []int{12}
}

func (m *RpcCashCheck) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RpcCashCheck.Unmarshal(m, b)
}
func (m *RpcCashCheck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RpcCashCheck.Marshal(b, m, deterministic)
}
func (m *RpcCashCheck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcCashCheck.Merge(m, src)
}
func (m *RpcCashCheck) XXX_Size() int {
	return xxx_messageInfo_RpcCashCheck.Size(m)
}
func (m *RpcCashCheck) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcCashCheck.DiscardUnknown(m)
}

var xxx_messageInfo_RpcCashCheck proto.InternalMessageInfo

func (m *RpcCashCheck) GetChainid() uint32 {
	if m != nil {
		return m.Chainid
	}
	return 0
}

func (m *RpcCashCheck) GetFrom() *RpcAddress {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *RpcCashCheck) GetTo() *RpcAddress {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *RpcCashCheck) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *RpcCashCheck) GetExpireHeight() uint64 {
	if m != nil {
		return m.ExpireHeight
	}
	return 0
}

func (m *RpcCashCheck) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

func (m *RpcCashCheck) GetUselocal() bool {
	if m != nil {
		return m.Uselocal
	}
	return false
}

func (m *RpcCashCheck) GetParentChain() uint32 {
	if m != nil {
		return m.ParentChain
	}
	return 0
}

func (m *RpcCashCheck) GetIsShard() bool {
	if m != nil {
		return m.IsShard
	}
	return false
}

func (m *RpcCashCheck) GetCurrencyId() int32 {
	if m != nil {
		return m.CurrencyId
	}
	return 0
}

type RpcRRProofReq struct {
	ChainId              uint32   `protobuf:"varint,1,opt,name=chainId,proto3" json:"chainId,omitempty"`
	RootHash             []byte   `protobuf:"bytes,3,opt,name=rootHash,proto3" json:"rootHash,omitempty"`
	NodeHash             []byte   `protobuf:"bytes,4,opt,name=nodeHash,proto3" json:"nodeHash,omitempty"`
	Pub                  []byte   `protobuf:"bytes,5,opt,name=pub,proto3" json:"pub,omitempty"`
	Sig                  []byte   `protobuf:"bytes,6,opt,name=sig,proto3" json:"sig,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RpcRRProofReq) Reset()         { *m = RpcRRProofReq{} }
func (m *RpcRRProofReq) String() string { return proto.CompactTextString(m) }
func (*RpcRRProofReq) ProtoMessage()    {}
func (*RpcRRProofReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad098daeda4239f7, []int{13}
}

func (m *RpcRRProofReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RpcRRProofReq.Unmarshal(m, b)
}
func (m *RpcRRProofReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RpcRRProofReq.Marshal(b, m, deterministic)
}
func (m *RpcRRProofReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcRRProofReq.Merge(m, src)
}
func (m *RpcRRProofReq) XXX_Size() int {
	return xxx_messageInfo_RpcRRProofReq.Size(m)
}
func (m *RpcRRProofReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcRRProofReq.DiscardUnknown(m)
}

var xxx_messageInfo_RpcRRProofReq proto.InternalMessageInfo

func (m *RpcRRProofReq) GetChainId() uint32 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *RpcRRProofReq) GetRootHash() []byte {
	if m != nil {
		return m.RootHash
	}
	return nil
}

func (m *RpcRRProofReq) GetNodeHash() []byte {
	if m != nil {
		return m.NodeHash
	}
	return nil
}

func (m *RpcRRProofReq) GetPub() []byte {
	if m != nil {
		return m.Pub
	}
	return nil
}

func (m *RpcRRProofReq) GetSig() []byte {
	if m != nil {
		return m.Sig
	}
	return nil
}

type RpcMsgReq struct {
	Type                 uint32   `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Msg                  []byte   `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RpcMsgReq) Reset()         { *m = RpcMsgReq{} }
func (m *RpcMsgReq) String() string { return proto.CompactTextString(m) }
func (*RpcMsgReq) ProtoMessage()    {}
func (*RpcMsgReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad098daeda4239f7, []int{14}
}

func (m *RpcMsgReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RpcMsgReq.Unmarshal(m, b)
}
func (m *RpcMsgReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RpcMsgReq.Marshal(b, m, deterministic)
}
func (m *RpcMsgReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcMsgReq.Merge(m, src)
}
func (m *RpcMsgReq) XXX_Size() int {
	return xxx_messageInfo_RpcMsgReq.Size(m)
}
func (m *RpcMsgReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcMsgReq.DiscardUnknown(m)
}

var xxx_messageInfo_RpcMsgReq proto.InternalMessageInfo

func (m *RpcMsgReq) GetType() uint32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *RpcMsgReq) GetMsg() []byte {
	if m != nil {
		return m.Msg
	}
	return nil
}

type RpcRespondStream struct {
	Code                 int32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg                  string   `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Stream               []byte   `protobuf:"bytes,3,opt,name=stream,proto3" json:"stream,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RpcRespondStream) Reset()         { *m = RpcRespondStream{} }
func (m *RpcRespondStream) String() string { return proto.CompactTextString(m) }
func (*RpcRespondStream) ProtoMessage()    {}
func (*RpcRespondStream) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad098daeda4239f7, []int{15}
}

func (m *RpcRespondStream) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RpcRespondStream.Unmarshal(m, b)
}
func (m *RpcRespondStream) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RpcRespondStream.Marshal(b, m, deterministic)
}
func (m *RpcRespondStream) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcRespondStream.Merge(m, src)
}
func (m *RpcRespondStream) XXX_Size() int {
	return xxx_messageInfo_RpcRespondStream.Size(m)
}
func (m *RpcRespondStream) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcRespondStream.DiscardUnknown(m)
}

var xxx_messageInfo_RpcRespondStream proto.InternalMessageInfo

func (m *RpcRespondStream) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *RpcRespondStream) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *RpcRespondStream) GetStream() []byte {
	if m != nil {
		return m.Stream
	}
	return nil
}

func init() {
	proto.RegisterType((*RpcChainInfoReq)(nil), "rpcserver.RpcChainInfoReq")
	proto.RegisterType((*RpcAddress)(nil), "rpcserver.RpcAddress")
	proto.RegisterType((*RpcTXHash)(nil), "rpcserver.RpcTXHash")
	proto.RegisterType((*RpcTxList)(nil), "rpcserver.RpcTxList")
	proto.RegisterType((*RpcTx)(nil), "rpcserver.RpcTx")
	proto.RegisterType((*RpcStatsReq)(nil), "rpcserver.RpcStatsReq")
	proto.RegisterType((*RpcRequest)(nil), "rpcserver.RpcRequest")
	proto.RegisterType((*RpcChainRequest)(nil), "rpcserver.RpcChainRequest")
	proto.RegisterType((*RpcResponse)(nil), "rpcserver.RpcResponse")
	proto.RegisterType((*RpcBlockHeight)(nil), "rpcserver.RpcBlockHeight")
	proto.RegisterType((*RpcChainEpoch)(nil), "rpcserver.RpcChainEpoch")
	proto.RegisterType((*RpcBlockTxsReq)(nil), "rpcserver.RpcBlockTxsReq")
	proto.RegisterType((*RpcCashCheck)(nil), "rpcserver.RpcCashCheck")
	proto.RegisterType((*RpcRRProofReq)(nil), "rpcserver.RpcRRProofReq")
	proto.RegisterType((*RpcMsgReq)(nil), "rpcserver.RpcMsgReq")
	proto.RegisterType((*RpcRespondStream)(nil), "rpcserver.RpcRespondStream")
}

func init() { proto.RegisterFile("server.proto", fileDescriptor_ad098daeda4239f7) }

var fileDescriptor_ad098daeda4239f7 = []byte{
	// 993 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x56, 0xcd, 0x6e, 0xdb, 0x46,
	0x10, 0x86, 0x64, 0xc9, 0xb6, 0x46, 0x72, 0x6c, 0x2c, 0x9c, 0x94, 0x71, 0x8b, 0x42, 0x20, 0x50,
	0xd4, 0x45, 0x01, 0x17, 0x75, 0x91, 0x43, 0xda, 0x83, 0x13, 0x33, 0x81, 0xec, 0xa2, 0x01, 0x8c,
	0xb5, 0xd0, 0xf6, 0xba, 0x5e, 0x8e, 0x45, 0xd6, 0x12, 0x97, 0xd9, 0x5d, 0x19, 0x52, 0xef, 0x7d,
	0x85, 0xbe, 0x50, 0xfb, 0x18, 0x7d, 0x98, 0x62, 0x87, 0xa4, 0x44, 0xc9, 0x22, 0x03, 0xe7, 0x94,
	0xdb, 0xce, 0xdf, 0xb7, 0xb3, 0x33, 0xdf, 0x0c, 0x09, 0x3d, 0x83, 0xfa, 0x1e, 0xf5, 0x49, 0xaa,
	0x95, 0x55, 0xac, 0xa3, 0x53, 0x99, 0x29, 0xfc, 0x6f, 0x61, 0x9f, 0xa7, 0x32, 0x88, 0x44, 0x9c,
	0x5c, 0x26, 0xb7, 0x8a, 0xe3, 0x7b, 0xe6, 0xc1, 0x8e, 0x74, 0x72, 0x1c, 0x7a, 0x8d, 0xfe, 0xd6,
	0xf1, 0x1e, 0x2f, 0x44, 0xff, 0x15, 0x00, 0x4f, 0xe5, 0xeb, 0x30, 0xd4, 0x68, 0xcc, 0xaa, 0x5f,
	0xa3, 0xe4, 0xe7, 0x2c, 0x22, 0x73, 0xf2, 0x9a, 0xfd, 0xc6, 0x71, 0x8f, 0x17, 0xa2, 0xff, 0x12,
	0x3a, 0x3c, 0x95, 0xc3, 0xdf, 0x2f, 0x84, 0x89, 0x6a, 0x00, 0x18, 0xb4, 0x22, 0x61, 0xa2, 0x3c,
	0x9a, 0xce, 0xfe, 0xdf, 0x8d, 0x2c, 0x76, 0xf6, 0x4b, 0x6c, 0x6c, 0x4d, 0xec, 0x77, 0xab, 0x97,
	0x77, 0x4f, 0x9f, 0x9e, 0x2c, 0x9e, 0x7b, 0xb2, 0x4c, 0x7f, 0x91, 0x13, 0xeb, 0x43, 0xd7, 0x58,
	0xa1, 0xed, 0x05, 0xc6, 0xa3, 0xc8, 0x7a, 0x5b, 0x04, 0x57, 0x56, 0xb1, 0x2f, 0xa0, 0x83, 0x49,
	0x98, 0xdb, 0x5b, 0x64, 0x5f, 0x2a, 0xfc, 0x7f, 0x9a, 0xd0, 0xa6, 0xc4, 0x6a, 0x92, 0xfa, 0x06,
	0x5a, 0xb7, 0x5a, 0x4d, 0xea, 0x33, 0x22, 0x17, 0xf6, 0x15, 0x34, 0xad, 0xa2, 0x2c, 0x2a, 0x1d,
	0x9b, 0x56, 0xb1, 0x43, 0x68, 0x27, 0x2a, 0x91, 0x48, 0xf9, 0xb4, 0x78, 0x26, 0xb0, 0x03, 0xd8,
	0xba, 0x17, 0x63, 0xaf, 0xdd, 0x6f, 0x1c, 0x77, 0xb8, 0x3b, 0x3a, 0xbf, 0x38, 0x49, 0xa7, 0xd6,
	0xdb, 0xa6, 0x5a, 0x66, 0x82, 0xf3, 0x4b, 0xa7, 0x37, 0xde, 0x0e, 0xe9, 0xdc, 0xd1, 0x69, 0x4c,
	0x3c, 0xf2, 0x76, 0x33, 0x8d, 0x89, 0x47, 0xec, 0x08, 0x76, 0xa7, 0x06, 0xc7, 0x4a, 0x8a, 0xb1,
	0xd7, 0xe9, 0x37, 0x8e, 0x77, 0xf9, 0x42, 0x76, 0xa8, 0x38, 0xb3, 0x5a, 0x78, 0x90, 0xa1, 0x92,
	0xe0, 0xea, 0x34, 0x99, 0x8e, 0x6d, 0x9c, 0x4e, 0x6f, 0x8c, 0xd7, 0xed, 0x6f, 0x1d, 0xf7, 0xf8,
	0x52, 0xb1, 0xb0, 0x9a, 0x78, 0x64, 0xbc, 0x5e, 0xc9, 0xea, 0x14, 0xfe, 0xd7, 0xd0, 0xe5, 0xa9,
	0xbc, 0xb6, 0xc2, 0x9a, 0x07, 0x24, 0x2c, 0x97, 0xd2, 0xef, 0x13, 0x09, 0x39, 0xbe, 0x9f, 0xa2,
	0xb1, 0x8e, 0x29, 0xa1, 0xb0, 0x82, 0x9c, 0x3a, 0x9c, 0xce, 0x65, 0x4e, 0x17, 0x6e, 0xd5, 0x70,
	0x2f, 0xe8, 0x5e, 0x8e, 0x26, 0x55, 0x89, 0x41, 0x87, 0x27, 0x55, 0x88, 0xe4, 0xd5, 0xe6, 0x74,
	0x5e, 0xdc, 0xd1, 0x2c, 0xdd, 0x71, 0x0e, 0x4f, 0x78, 0x2a, 0xcf, 0xc7, 0x4a, 0xde, 0xe5, 0x24,
	0xa9, 0x6e, 0xfe, 0x33, 0xd8, 0x8e, 0x32, 0xee, 0x34, 0xa9, 0x57, 0xb9, 0xe4, 0x9f, 0xc1, 0x5e,
	0x91, 0xe7, 0xdb, 0x54, 0xc9, 0xba, 0x81, 0x70, 0xf5, 0x76, 0x2e, 0x39, 0x42, 0x26, 0xf8, 0x7f,
	0x2c, 0x93, 0x18, 0xce, 0xea, 0xcb, 0x56, 0x95, 0x84, 0x7b, 0x5c, 0x2a, 0x46, 0x48, 0x84, 0x6b,
	0x73, 0x3a, 0x3b, 0x9d, 0x89, 0xff, 0xcc, 0xa8, 0xd5, 0xe6, 0x74, 0xf6, 0xff, 0x6d, 0x42, 0xcf,
	0x65, 0x2b, 0x4c, 0x14, 0x44, 0x28, 0xef, 0x3e, 0x01, 0xb2, 0xfb, 0xd0, 0xc3, 0x59, 0x1a, 0x6b,
	0xcc, 0x27, 0xb3, 0x4d, 0xc6, 0x15, 0x9d, 0x7b, 0xb6, 0x98, 0xa8, 0x69, 0x92, 0xf1, 0xbf, 0xc3,
	0x73, 0x69, 0x85, 0xdc, 0x3b, 0x6b, 0xe4, 0xee, 0x43, 0x37, 0x15, 0x1a, 0x13, 0x4b, 0xad, 0xa1,
	0x91, 0xd8, 0xe3, 0x65, 0x95, 0x7b, 0x7b, 0x6c, 0xae, 0x23, 0xa1, 0xc3, 0x7c, 0x32, 0x0a, 0x91,
	0x7d, 0x09, 0x20, 0xa7, 0x5a, 0x63, 0x22, 0xe7, 0x97, 0x21, 0x4d, 0x47, 0x9b, 0x97, 0x34, 0xfe,
	0x5f, 0x0d, 0x6a, 0x3a, 0xe7, 0x57, 0x5a, 0xa9, 0xdb, 0x72, 0xcb, 0x2e, 0x57, 0xeb, 0x78, 0x19,
	0xba, 0x1c, 0xb5, 0x52, 0xd6, 0xed, 0x4a, 0x2a, 0x51, 0x8f, 0x2f, 0x64, 0x67, 0x4b, 0x54, 0x88,
	0x64, 0x6b, 0x65, 0xb6, 0x42, 0x2e, 0x86, 0xbb, 0xfd, 0x60, 0xb8, 0xb7, 0x17, 0xc3, 0xed, 0x7f,
	0x4f, 0xcb, 0xf4, 0x9d, 0x19, 0xb9, 0x14, 0x18, 0xb4, 0xec, 0x3c, 0xc5, 0xfc, 0x7e, 0x3a, 0xbb,
	0x90, 0x89, 0x19, 0xe5, 0x1b, 0xd8, 0x1d, 0xfd, 0x2b, 0x38, 0x58, 0x4c, 0x4a, 0x78, 0x6d, 0x35,
	0x8a, 0xc9, 0xc6, 0x71, 0x29, 0x45, 0x76, 0x28, 0xd2, 0x35, 0xc1, 0x90, 0x7f, 0xfe, 0x8c, 0x5c,
	0x3a, 0xfd, 0x0f, 0xa0, 0xe5, 0xb2, 0x66, 0x2f, 0xa0, 0x75, 0x15, 0x27, 0x23, 0xb6, 0x46, 0x81,
	0x7c, 0x7a, 0x8f, 0x9e, 0xad, 0xab, 0xf3, 0x61, 0xfd, 0x09, 0x60, 0x80, 0xf6, 0xb5, 0x94, 0xd4,
	0xd2, 0xcd, 0xfc, 0xa9, 0x0c, 0x7e, 0x03, 0x87, 0x03, 0xb4, 0x43, 0x2d, 0x12, 0x23, 0xa4, 0x8d,
	0x55, 0x72, 0x3e, 0xa7, 0xea, 0x1d, 0xae, 0xfa, 0x67, 0xdf, 0xaa, 0x4a, 0x94, 0x33, 0xd8, 0x5f,
	0x45, 0x31, 0x0f, 0x00, 0xe8, 0x83, 0x55, 0x09, 0x70, 0x0a, 0xdb, 0xd7, 0x98, 0x84, 0xc3, 0x19,
	0x3b, 0x58, 0x8f, 0xab, 0x8c, 0xf9, 0x11, 0x76, 0x07, 0x68, 0x69, 0x57, 0xb2, 0x35, 0x9f, 0x62,
	0x81, 0x56, 0xc6, 0x06, 0xf0, 0x64, 0x80, 0x36, 0x5f, 0x5c, 0x22, 0x44, 0xcd, 0x9e, 0xaf, 0x7a,
	0x96, 0x76, 0x5a, 0x25, 0xc8, 0x39, 0x25, 0x40, 0x9e, 0x75, 0xe1, 0x9f, 0x6f, 0x0a, 0x2f, 0xa8,
	0xf3, 0x86, 0x2a, 0x57, 0x4a, 0xc4, 0x7c, 0x4c, 0x26, 0xaf, 0xa0, 0x5b, 0xa0, 0x0c, 0x67, 0x9b,
	0x11, 0xb2, 0xd5, 0x58, 0x43, 0xa2, 0xfd, 0x40, 0x8c, 0xc7, 0xa5, 0x16, 0x3e, 0xa2, 0x13, 0xe7,
	0xd0, 0x1b, 0xa0, 0x5d, 0xfc, 0x3e, 0xb1, 0xa3, 0x55, 0xbf, 0xf2, 0x7f, 0x55, 0xcd, 0x13, 0x08,
	0x43, 0x4d, 0x26, 0xb1, 0xb5, 0x88, 0xcc, 0xdb, 0x80, 0x41, 0xdf, 0x87, 0x1a, 0x12, 0xf6, 0xde,
	0x89, 0x3b, 0xfc, 0x55, 0x4a, 0xda, 0x2a, 0xec, 0xb3, 0x35, 0x84, 0x62, 0x67, 0x57, 0x02, 0x5c,
	0xc0, 0x53, 0x07, 0x10, 0x04, 0xc1, 0xdb, 0x59, 0x6c, 0x2c, 0x26, 0x12, 0x3f, 0x12, 0x29, 0x80,
	0x03, 0xf7, 0x98, 0x20, 0xe0, 0x38, 0x16, 0x36, 0xbe, 0xc7, 0xe1, 0xec, 0xf1, 0x20, 0x3f, 0xc3,
	0xf3, 0xe5, 0x5c, 0xff, 0x16, 0xdb, 0x88, 0x6a, 0x90, 0x6f, 0xf4, 0x47, 0x8e, 0xf9, 0x19, 0x11,
	0x24, 0xdf, 0xb7, 0x66, 0xbd, 0xb8, 0xcb, 0x3d, 0xfc, 0x81, 0x16, 0x73, 0x1e, 0xd0, 0x12, 0xb7,
	0x1b, 0x5b, 0xfc, 0xa1, 0x45, 0xf5, 0x12, 0x3a, 0x6e, 0xc8, 0xb3, 0x81, 0x59, 0xdb, 0x0f, 0xd9,
	0x0e, 0xae, 0x0b, 0x1d, 0xea, 0x79, 0xa0, 0xe7, 0xa9, 0xfb, 0x0e, 0x3e, 0x26, 0xf4, 0x66, 0x9b,
	0xfe, 0xf6, 0x7f, 0xf8, 0x3f, 0x00, 0x00, 0xff, 0xff, 0x61, 0x3e, 0x7f, 0xa0, 0xfd, 0x0b, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// NodeClient is the client API for Node service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NodeClient interface {
	Ping(ctx context.Context, in *RpcRequest, opts ...grpc.CallOption) (*RpcResponse, error)
	GetAccount(ctx context.Context, in *RpcAddress, opts ...grpc.CallOption) (*RpcResponse, error)
	GetTransactionByHash(ctx context.Context, in *RpcTXHash, opts ...grpc.CallOption) (*RpcResponse, error)
	GetTransactions(ctx context.Context, in *RpcTxList, opts ...grpc.CallOption) (*RpcResponse, error)
	SendTx(ctx context.Context, in *RpcTx, opts ...grpc.CallOption) (*RpcResponse, error)
	GetStats(ctx context.Context, in *RpcStatsReq, opts ...grpc.CallOption) (*RpcResponse, error)
	GetBlockHeader(ctx context.Context, in *RpcBlockHeight, opts ...grpc.CallOption) (*RpcResponse, error)
	GetBlock(ctx context.Context, in *RpcBlockHeight, opts ...grpc.CallOption) (*RpcRespondStream, error)
	GetBlockHeaders(ctx context.Context, in *RpcBlockHeight, opts ...grpc.CallOption) (*RpcResponse, error)
	GetBlockTxs(ctx context.Context, in *RpcBlockTxsReq, opts ...grpc.CallOption) (*RpcResponse, error)
	CallTransaction(ctx context.Context, in *RpcTx, opts ...grpc.CallOption) (*RpcResponse, error)
	GetChainInfo(ctx context.Context, in *RpcChainInfoReq, opts ...grpc.CallOption) (*RpcResponse, error)
	GetCommittee(ctx context.Context, in *RpcChainEpoch, opts ...grpc.CallOption) (*RpcResponse, error)
	MakeVccProof(ctx context.Context, in *RpcCashCheck, opts ...grpc.CallOption) (*RpcResponse, error)
	MakeCCCExistenceProof(ctx context.Context, in *RpcCashCheck, opts ...grpc.CallOption) (*RpcResponse, error)
	GetCCCRelativeTx(ctx context.Context, in *RpcCashCheck, opts ...grpc.CallOption) (*RpcResponse, error)
	GetAccountWithChainHeight(ctx context.Context, in *RpcAddress, opts ...grpc.CallOption) (*RpcResponse, error)
	GetRRProofs(ctx context.Context, in *RpcRRProofReq, opts ...grpc.CallOption) (*RpcResponse, error)
	GetRRCurrent(ctx context.Context, in *RpcChainRequest, opts ...grpc.CallOption) (*RpcResponse, error)
	SendBlock(ctx context.Context, in *RpcMsgReq, opts ...grpc.CallOption) (*RpcResponse, error)
	TryCrypto(ctx context.Context, in *RpcMsgReq, opts ...grpc.CallOption) (*RpcResponse, error)
}

type nodeClient struct {
	cc *grpc.ClientConn
}

func NewNodeClient(cc *grpc.ClientConn) NodeClient {
	return &nodeClient{cc}
}

func (c *nodeClient) Ping(ctx context.Context, in *RpcRequest, opts ...grpc.CallOption) (*RpcResponse, error) {
	out := new(RpcResponse)
	err := c.cc.Invoke(ctx, "/rpcserver.node/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) GetAccount(ctx context.Context, in *RpcAddress, opts ...grpc.CallOption) (*RpcResponse, error) {
	out := new(RpcResponse)
	err := c.cc.Invoke(ctx, "/rpcserver.node/GetAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) GetTransactionByHash(ctx context.Context, in *RpcTXHash, opts ...grpc.CallOption) (*RpcResponse, error) {
	out := new(RpcResponse)
	err := c.cc.Invoke(ctx, "/rpcserver.node/GetTransactionByHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) GetTransactions(ctx context.Context, in *RpcTxList, opts ...grpc.CallOption) (*RpcResponse, error) {
	out := new(RpcResponse)
	err := c.cc.Invoke(ctx, "/rpcserver.node/GetTransactions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) SendTx(ctx context.Context, in *RpcTx, opts ...grpc.CallOption) (*RpcResponse, error) {
	out := new(RpcResponse)
	err := c.cc.Invoke(ctx, "/rpcserver.node/SendTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) GetStats(ctx context.Context, in *RpcStatsReq, opts ...grpc.CallOption) (*RpcResponse, error) {
	out := new(RpcResponse)
	err := c.cc.Invoke(ctx, "/rpcserver.node/GetStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) GetBlockHeader(ctx context.Context, in *RpcBlockHeight, opts ...grpc.CallOption) (*RpcResponse, error) {
	out := new(RpcResponse)
	err := c.cc.Invoke(ctx, "/rpcserver.node/GetBlockHeader", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) GetBlock(ctx context.Context, in *RpcBlockHeight, opts ...grpc.CallOption) (*RpcRespondStream, error) {
	out := new(RpcRespondStream)
	err := c.cc.Invoke(ctx, "/rpcserver.node/GetBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) GetBlockHeaders(ctx context.Context, in *RpcBlockHeight, opts ...grpc.CallOption) (*RpcResponse, error) {
	out := new(RpcResponse)
	err := c.cc.Invoke(ctx, "/rpcserver.node/GetBlockHeaders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) GetBlockTxs(ctx context.Context, in *RpcBlockTxsReq, opts ...grpc.CallOption) (*RpcResponse, error) {
	out := new(RpcResponse)
	err := c.cc.Invoke(ctx, "/rpcserver.node/GetBlockTxs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) CallTransaction(ctx context.Context, in *RpcTx, opts ...grpc.CallOption) (*RpcResponse, error) {
	out := new(RpcResponse)
	err := c.cc.Invoke(ctx, "/rpcserver.node/CallTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) GetChainInfo(ctx context.Context, in *RpcChainInfoReq, opts ...grpc.CallOption) (*RpcResponse, error) {
	out := new(RpcResponse)
	err := c.cc.Invoke(ctx, "/rpcserver.node/GetChainInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) GetCommittee(ctx context.Context, in *RpcChainEpoch, opts ...grpc.CallOption) (*RpcResponse, error) {
	out := new(RpcResponse)
	err := c.cc.Invoke(ctx, "/rpcserver.node/GetCommittee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) MakeVccProof(ctx context.Context, in *RpcCashCheck, opts ...grpc.CallOption) (*RpcResponse, error) {
	out := new(RpcResponse)
	err := c.cc.Invoke(ctx, "/rpcserver.node/MakeVccProof", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) MakeCCCExistenceProof(ctx context.Context, in *RpcCashCheck, opts ...grpc.CallOption) (*RpcResponse, error) {
	out := new(RpcResponse)
	err := c.cc.Invoke(ctx, "/rpcserver.node/MakeCCCExistenceProof", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) GetCCCRelativeTx(ctx context.Context, in *RpcCashCheck, opts ...grpc.CallOption) (*RpcResponse, error) {
	out := new(RpcResponse)
	err := c.cc.Invoke(ctx, "/rpcserver.node/GetCCCRelativeTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) GetAccountWithChainHeight(ctx context.Context, in *RpcAddress, opts ...grpc.CallOption) (*RpcResponse, error) {
	out := new(RpcResponse)
	err := c.cc.Invoke(ctx, "/rpcserver.node/GetAccountWithChainHeight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) GetRRProofs(ctx context.Context, in *RpcRRProofReq, opts ...grpc.CallOption) (*RpcResponse, error) {
	out := new(RpcResponse)
	err := c.cc.Invoke(ctx, "/rpcserver.node/GetRRProofs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) GetRRCurrent(ctx context.Context, in *RpcChainRequest, opts ...grpc.CallOption) (*RpcResponse, error) {
	out := new(RpcResponse)
	err := c.cc.Invoke(ctx, "/rpcserver.node/GetRRCurrent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) SendBlock(ctx context.Context, in *RpcMsgReq, opts ...grpc.CallOption) (*RpcResponse, error) {
	out := new(RpcResponse)
	err := c.cc.Invoke(ctx, "/rpcserver.node/SendBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) TryCrypto(ctx context.Context, in *RpcMsgReq, opts ...grpc.CallOption) (*RpcResponse, error) {
	out := new(RpcResponse)
	err := c.cc.Invoke(ctx, "/rpcserver.node/TryCrypto", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodeServer is the server API for Node service.
type NodeServer interface {
	Ping(context.Context, *RpcRequest) (*RpcResponse, error)
	GetAccount(context.Context, *RpcAddress) (*RpcResponse, error)
	GetTransactionByHash(context.Context, *RpcTXHash) (*RpcResponse, error)
	GetTransactions(context.Context, *RpcTxList) (*RpcResponse, error)
	SendTx(context.Context, *RpcTx) (*RpcResponse, error)
	GetStats(context.Context, *RpcStatsReq) (*RpcResponse, error)
	GetBlockHeader(context.Context, *RpcBlockHeight) (*RpcResponse, error)
	GetBlock(context.Context, *RpcBlockHeight) (*RpcRespondStream, error)
	GetBlockHeaders(context.Context, *RpcBlockHeight) (*RpcResponse, error)
	GetBlockTxs(context.Context, *RpcBlockTxsReq) (*RpcResponse, error)
	CallTransaction(context.Context, *RpcTx) (*RpcResponse, error)
	GetChainInfo(context.Context, *RpcChainInfoReq) (*RpcResponse, error)
	GetCommittee(context.Context, *RpcChainEpoch) (*RpcResponse, error)
	MakeVccProof(context.Context, *RpcCashCheck) (*RpcResponse, error)
	MakeCCCExistenceProof(context.Context, *RpcCashCheck) (*RpcResponse, error)
	GetCCCRelativeTx(context.Context, *RpcCashCheck) (*RpcResponse, error)
	GetAccountWithChainHeight(context.Context, *RpcAddress) (*RpcResponse, error)
	GetRRProofs(context.Context, *RpcRRProofReq) (*RpcResponse, error)
	GetRRCurrent(context.Context, *RpcChainRequest) (*RpcResponse, error)
	SendBlock(context.Context, *RpcMsgReq) (*RpcResponse, error)
	TryCrypto(context.Context, *RpcMsgReq) (*RpcResponse, error)
}

// UnimplementedNodeServer can be embedded to have forward compatible implementations.
type UnimplementedNodeServer struct {
}

func (*UnimplementedNodeServer) Ping(ctx context.Context, req *RpcRequest) (*RpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (*UnimplementedNodeServer) GetAccount(ctx context.Context, req *RpcAddress) (*RpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccount not implemented")
}
func (*UnimplementedNodeServer) GetTransactionByHash(ctx context.Context, req *RpcTXHash) (*RpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionByHash not implemented")
}
func (*UnimplementedNodeServer) GetTransactions(ctx context.Context, req *RpcTxList) (*RpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactions not implemented")
}
func (*UnimplementedNodeServer) SendTx(ctx context.Context, req *RpcTx) (*RpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTx not implemented")
}
func (*UnimplementedNodeServer) GetStats(ctx context.Context, req *RpcStatsReq) (*RpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStats not implemented")
}
func (*UnimplementedNodeServer) GetBlockHeader(ctx context.Context, req *RpcBlockHeight) (*RpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockHeader not implemented")
}
func (*UnimplementedNodeServer) GetBlock(ctx context.Context, req *RpcBlockHeight) (*RpcRespondStream, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlock not implemented")
}
func (*UnimplementedNodeServer) GetBlockHeaders(ctx context.Context, req *RpcBlockHeight) (*RpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockHeaders not implemented")
}
func (*UnimplementedNodeServer) GetBlockTxs(ctx context.Context, req *RpcBlockTxsReq) (*RpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockTxs not implemented")
}
func (*UnimplementedNodeServer) CallTransaction(ctx context.Context, req *RpcTx) (*RpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CallTransaction not implemented")
}
func (*UnimplementedNodeServer) GetChainInfo(ctx context.Context, req *RpcChainInfoReq) (*RpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChainInfo not implemented")
}
func (*UnimplementedNodeServer) GetCommittee(ctx context.Context, req *RpcChainEpoch) (*RpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommittee not implemented")
}
func (*UnimplementedNodeServer) MakeVccProof(ctx context.Context, req *RpcCashCheck) (*RpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeVccProof not implemented")
}
func (*UnimplementedNodeServer) MakeCCCExistenceProof(ctx context.Context, req *RpcCashCheck) (*RpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeCCCExistenceProof not implemented")
}
func (*UnimplementedNodeServer) GetCCCRelativeTx(ctx context.Context, req *RpcCashCheck) (*RpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCCCRelativeTx not implemented")
}
func (*UnimplementedNodeServer) GetAccountWithChainHeight(ctx context.Context, req *RpcAddress) (*RpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountWithChainHeight not implemented")
}
func (*UnimplementedNodeServer) GetRRProofs(ctx context.Context, req *RpcRRProofReq) (*RpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRRProofs not implemented")
}
func (*UnimplementedNodeServer) GetRRCurrent(ctx context.Context, req *RpcChainRequest) (*RpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRRCurrent not implemented")
}
func (*UnimplementedNodeServer) SendBlock(ctx context.Context, req *RpcMsgReq) (*RpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendBlock not implemented")
}
func (*UnimplementedNodeServer) TryCrypto(ctx context.Context, req *RpcMsgReq) (*RpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TryCrypto not implemented")
}

func RegisterNodeServer(s *grpc.Server, srv NodeServer) {
	s.RegisterService(&_Node_serviceDesc, srv)
}

func _Node_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcserver.node/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).Ping(ctx, req.(*RpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_GetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RpcAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).GetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcserver.node/GetAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).GetAccount(ctx, req.(*RpcAddress))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_GetTransactionByHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RpcTXHash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).GetTransactionByHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcserver.node/GetTransactionByHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).GetTransactionByHash(ctx, req.(*RpcTXHash))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_GetTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RpcTxList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).GetTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcserver.node/GetTransactions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).GetTransactions(ctx, req.(*RpcTxList))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_SendTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RpcTx)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).SendTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcserver.node/SendTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).SendTx(ctx, req.(*RpcTx))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_GetStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RpcStatsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).GetStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcserver.node/GetStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).GetStats(ctx, req.(*RpcStatsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_GetBlockHeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RpcBlockHeight)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).GetBlockHeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcserver.node/GetBlockHeader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).GetBlockHeader(ctx, req.(*RpcBlockHeight))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_GetBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RpcBlockHeight)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).GetBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcserver.node/GetBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).GetBlock(ctx, req.(*RpcBlockHeight))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_GetBlockHeaders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RpcBlockHeight)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).GetBlockHeaders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcserver.node/GetBlockHeaders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).GetBlockHeaders(ctx, req.(*RpcBlockHeight))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_GetBlockTxs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RpcBlockTxsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).GetBlockTxs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcserver.node/GetBlockTxs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).GetBlockTxs(ctx, req.(*RpcBlockTxsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_CallTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RpcTx)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).CallTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcserver.node/CallTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).CallTransaction(ctx, req.(*RpcTx))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_GetChainInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RpcChainInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).GetChainInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcserver.node/GetChainInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).GetChainInfo(ctx, req.(*RpcChainInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_GetCommittee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RpcChainEpoch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).GetCommittee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcserver.node/GetCommittee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).GetCommittee(ctx, req.(*RpcChainEpoch))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_MakeVccProof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RpcCashCheck)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).MakeVccProof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcserver.node/MakeVccProof",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).MakeVccProof(ctx, req.(*RpcCashCheck))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_MakeCCCExistenceProof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RpcCashCheck)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).MakeCCCExistenceProof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcserver.node/MakeCCCExistenceProof",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).MakeCCCExistenceProof(ctx, req.(*RpcCashCheck))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_GetCCCRelativeTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RpcCashCheck)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).GetCCCRelativeTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcserver.node/GetCCCRelativeTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).GetCCCRelativeTx(ctx, req.(*RpcCashCheck))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_GetAccountWithChainHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RpcAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).GetAccountWithChainHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcserver.node/GetAccountWithChainHeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).GetAccountWithChainHeight(ctx, req.(*RpcAddress))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_GetRRProofs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RpcRRProofReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).GetRRProofs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcserver.node/GetRRProofs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).GetRRProofs(ctx, req.(*RpcRRProofReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_GetRRCurrent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RpcChainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).GetRRCurrent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcserver.node/GetRRCurrent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).GetRRCurrent(ctx, req.(*RpcChainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_SendBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RpcMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).SendBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcserver.node/SendBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).SendBlock(ctx, req.(*RpcMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_TryCrypto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RpcMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).TryCrypto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcserver.node/TryCrypto",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).TryCrypto(ctx, req.(*RpcMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Node_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpcserver.node",
	HandlerType: (*NodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Node_Ping_Handler,
		},
		{
			MethodName: "GetAccount",
			Handler:    _Node_GetAccount_Handler,
		},
		{
			MethodName: "GetTransactionByHash",
			Handler:    _Node_GetTransactionByHash_Handler,
		},
		{
			MethodName: "GetTransactions",
			Handler:    _Node_GetTransactions_Handler,
		},
		{
			MethodName: "SendTx",
			Handler:    _Node_SendTx_Handler,
		},
		{
			MethodName: "GetStats",
			Handler:    _Node_GetStats_Handler,
		},
		{
			MethodName: "GetBlockHeader",
			Handler:    _Node_GetBlockHeader_Handler,
		},
		{
			MethodName: "GetBlock",
			Handler:    _Node_GetBlock_Handler,
		},
		{
			MethodName: "GetBlockHeaders",
			Handler:    _Node_GetBlockHeaders_Handler,
		},
		{
			MethodName: "GetBlockTxs",
			Handler:    _Node_GetBlockTxs_Handler,
		},
		{
			MethodName: "CallTransaction",
			Handler:    _Node_CallTransaction_Handler,
		},
		{
			MethodName: "GetChainInfo",
			Handler:    _Node_GetChainInfo_Handler,
		},
		{
			MethodName: "GetCommittee",
			Handler:    _Node_GetCommittee_Handler,
		},
		{
			MethodName: "MakeVccProof",
			Handler:    _Node_MakeVccProof_Handler,
		},
		{
			MethodName: "MakeCCCExistenceProof",
			Handler:    _Node_MakeCCCExistenceProof_Handler,
		},
		{
			MethodName: "GetCCCRelativeTx",
			Handler:    _Node_GetCCCRelativeTx_Handler,
		},
		{
			MethodName: "GetAccountWithChainHeight",
			Handler:    _Node_GetAccountWithChainHeight_Handler,
		},
		{
			MethodName: "GetRRProofs",
			Handler:    _Node_GetRRProofs_Handler,
		},
		{
			MethodName: "GetRRCurrent",
			Handler:    _Node_GetRRCurrent_Handler,
		},
		{
			MethodName: "SendBlock",
			Handler:    _Node_SendBlock_Handler,
		},
		{
			MethodName: "TryCrypto",
			Handler:    _Node_TryCrypto_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server.proto",
}
